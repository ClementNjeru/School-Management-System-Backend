// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                   Int                    @id @default(autoincrement())
  first_name           String
  last_name            String
  dob                  DateTime
  gender               String
  Class                Class                  @relation(fields: [classId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  classId              Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AdditionalFeeStudent AdditionalFeeStudent[]
  FeePayment           FeePayment[]
  StudentTermFee       StudentTermFee[]
  StudentGuardian      StudentGuardian[]
}

model Guardian {
  id              Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  phone           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StudentGuardian StudentGuardian[]
}

model StudentGuardian {
  id           Int      @id @default(autoincrement())
  Student      Student  @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  studentId    Int
  Guardian     Guardian @relation(fields: [guardianId], references: [id], onUpdate: Cascade)
  guardianId   Int
  relationship String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Teacher {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Class      Class[]
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  password             String
  role                 String
  activeStatus         Boolean   @default(true)
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Class {
  id             Int              @id @default(autoincrement())
  name           String
  Teacher        Teacher          @relation(fields: [teacherId], references: [id], onUpdate: Cascade)
  teacherId      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Student        Student[]
  TermFee        TermFee[]
  FeePayment     FeePayment[]
  StudentTermFee StudentTermFee[]
}

model TermFee {
  id        Int      @id @default(autoincrement())
  Term      Term     @relation(fields: [termId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  termId    Int
  Class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId   Int
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// food
// accommodation
// transport
model AdditionalFee {
  id                   Int                    @id @default(autoincrement())
  name                 String
  amount               Decimal
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AdditionalFeeStudent AdditionalFeeStudent[]
  StudentTermFee       StudentTermFee[]
}

model AdditionalFeeStudent {
  id              Int           @id @default(autoincrement())
  Student         Student       @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  studentId       Int
  AdditionalFee   AdditionalFee @relation(fields: [additionalFeeId], references: [id], onUpdate: Cascade)
  additionalFeeId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Term {
  id         Int          @id @default(autoincrement())
  name       String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  FeePayment FeePayment[]
  TermFee    TermFee[]
}

model FeePayment {
  id           Int      @id @default(autoincrement())
  Student      Student  @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  studentId    Int
  payment_mode String
  reference    String
  Class        Class    @relation(fields: [classId], references: [id], onUpdate: Cascade)
  classId      Int
  amount       Decimal
  Term         Term     @relation(fields: [termId], references: [id], onUpdate: Cascade)
  termId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// table for storing student term fee plus additionalfee sum
model StudentTermFee {
  id              Int           @id @default(autoincrement())
  Student         Student       @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  studentId       Int
  Class           Class         @relation(fields: [classId], references: [id], onUpdate: Cascade)
  classId         Int
  AdditionalFee   AdditionalFee @relation(fields: [additionalFeeId], references: [id], onUpdate: Cascade)
  additionalFeeId Int
  amount          Decimal
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// table with informtion about the school
model School {
  id              Int            @id @default (autoincrement())
  name            String         @name @default (autoincrement())
  email           String
  phone           Int
  address         Int
  address2        Int
  town            String
  school_motto    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

