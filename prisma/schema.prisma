// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                   Int                    @id @default(autoincrement())
  first_name           String
  last_name            String
  dob                  DateTime
  gender               String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Guardian             Guardian[]
  AdditionalFeeStudent AdditionalFeeStudent[]
  FeePayment           FeePayment[]
  StudentTermFee       StudentTermFee[]
}

model Teacher {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Class      Class[]
}

model Guardian {
  id           Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  phone        String
  Student      Student  @relation(fields: [studentId], references: [id])
  studentId    Int
  relationship String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Class {
  id        Int        @id @default(autoincrement())
  name      String
  Teacher   Teacher    @relation(fields: [teacherId], references: [id])
  teacherId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ClassFee  ClassFee[]
}

model ClassFee {
  id             Int              @id @default(autoincrement())
  name           String
  term_one       Decimal
  term_two       Decimal
  term_three     Decimal
  Class          Class            @relation(fields: [classId], references: [id])
  classId        Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FeePayment     FeePayment[]
  StudentTermFee StudentTermFee[]
}

// food
// accommodation
// transport
model AdditionalFee {
  id                   Int                    @id @default(autoincrement())
  name                 String
  amount               Decimal
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AdditionalFeeStudent AdditionalFeeStudent[]
  StudentTermFee       StudentTermFee[]
}

model AdditionalFeeStudent {
  id              Int           @id @default(autoincrement())
  Student         Student       @relation(fields: [studentId], references: [id])
  studentId       Int
  AdditionalFee   AdditionalFee @relation(fields: [additionalFeeId], references: [id])
  additionalFeeId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model FeePayment {
  id           Int      @id @default(autoincrement())
  Student      Student  @relation(fields: [studentId], references: [id])
  studentId    Int
  payment_mode String
  reference    String
  ClassFee     ClassFee @relation(fields: [classFeeId], references: [id])
  classFeeId   Int
  amount       Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// table for storing student term fee plus additionalfee sum
model StudentTermFee {
  id              Int           @id @default(autoincrement())
  Student         Student       @relation(fields: [studentId], references: [id])
  studentId       Int
  ClassFee        ClassFee      @relation(fields: [classFeeId], references: [id])
  classFeeId      Int
  AdditionalFee   AdditionalFee @relation(fields: [additionalFeeId], references: [id])
  additionalFeeId Int
  amount          Decimal
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
